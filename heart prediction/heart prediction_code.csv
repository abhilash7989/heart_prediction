import pandas as pd
import numpy as np
from sklearn import preprocessing
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report"
""
# Load dataset
"disease_df = pd.read_csv(r""C:\Users\Abhilash\Downloads\framingham.csv"")"
""
# Drop unwanted columns
"disease_df.drop(columns=['education'], inplace=True, axis=1)"
""
# Rename column
"disease_df.rename(columns={'male': 'Sex_male'}, inplace=True)"
""
#Handle missing values
# Option 1: Drop rows with missing values (cleanest)
disease_df.dropna(inplace=True)
""
# Option 2 (alternative): Fill missing numeric values with mean
"disease_df.fillna(disease_df.mean(numeric_only=True), inplace=True)"
""
"print(f""After cleaning, dataset shape: {disease_df.shape}"")"
""
""
#Save cleaned data
"cleaned_path = r""C:\Users\Abhilash\Downloads\framingham_cleaned.csv"""
"disease_df.to_csv(cleaned_path, index=False)"
"print(f""Cleaned dataset saved to: {cleaned_path}"")"
""
""
# Prepare data for training
"X = np.asarray(disease_df[['age', 'Sex_male', 'cigsPerDay', 'totChol', 'sysBP', 'glucose']])"
y = np.asarray(disease_df['TenYearCHD'])
""
# Standardize features
X = preprocessing.StandardScaler().fit(X).transform(X)
""
# Split into training and testing sets
"X_train, X_test, y_train, y_test = train_test_split("
"X, y, test_size=0.3, random_state=4)"
""
"print('Train set:', X_train.shape, y_train.shape)"
"print('Test set:', X_test.shape, y_test.shape)"
""
# Plot the count of target variable
"plt.figure(figsize=(7, 5))"
"sns.countplot(x='TenYearCHD', hue='TenYearCHD', data=disease_df,"
"palette=""BuGn_r"", legend=False)"
"plt.title(""Distribution of TenYearCHD"")"
plt.show()
""
# Plot target variable trend
"disease_df['TenYearCHD'].plot(title=""TenYearCHD values"")"
plt.show()
""
# Logistic Regression model
logreg = LogisticRegression()
"logreg.fit(X_train, y_train)"
y_pred = logreg.predict(X_test)
""
# Model accuracy
"print('Accuracy of the model is =', accuracy_score(y_test, y_pred))"
""
# Confusion matrix and classification report
print('\nThe details for confusion matrix are:')
"print(classification_report(y_test, y_pred))"
""
"cm = confusion_matrix(y_test, y_pred)"
"conf_matrix = pd.DataFrame(data=cm,"
"columns=['Predicted:0', 'Predicted:1'],"
"index=['Actual:0', 'Actual:1'])"
""
"plt.figure(figsize=(8, 5))"
"sns.heatmap(conf_matrix, annot=True, fmt='d', cmap=""Greens"")"
"plt.title(""Confusion Matrix"")"
plt.show()
import csv
""
# Path to your Python source file
"source_file = r""C:\Users\Abhilash\PycharmProjects\PythonProject5\heart prediction.py"""
""
# Path to save CSV
"csv_output = r""C:\Users\Abhilash\Downloads\heart prediction_code.csv"""
""
# Read and write into CSV
"with open(source_file, 'r', encoding='utf-8') as src, open(csv_output, 'w', newline='', encoding='utf-8') as out_csv:"
writer = csv.writer(out_csv)
for line in src:
writer.writerow([line.strip()])
""
"print(f""âœ… Source code saved to: {csv_output}"")"
